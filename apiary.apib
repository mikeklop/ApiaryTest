FORMAT: 1A
HOST: http://aaeinblr01828d.ww888.siemens.net:8443/amelie/webapi/km

# Annotation API

Annotation is an API allowing clients to get recommendations in different contexts.

## Experts collection [/experts]

### Get experts [GET]

+ Response 200 (plain/text)

        Geht

## Categories Collection [/categories]

### Get provided categories [GET]

+ Response 401
    
    + Headers

            WWW-Authenticate: Basic realm="protected"

+ Request

    + Headers
    
            Authorization: Basic 12345
        
+ Response 200 (application/json)

        [
            {
                "categories": 
                [
                    {
                        "id": 1,
                        "name": "Software architecture description"
                    },
                    {
                        "id": 2,
                        "name": "Requirements"
                    },
                    {
                        "id": 3,
                        "name": "Use Cases"
                    },
                    {
                        "id": 4,
                        "name": "user stories"
                    }
                ]
            }
        ]
        
+ Response 401 (text/plain)

        Anonymous access to AMELIE Rest API is not allowed
    
+ Response 403 (text/plain)

        Cannot find the requested resource here
        
## Template Collection [/templates]

### Get all templates [GET]
                
+ Response 200 (application/json)

        [
            {
                "templates": 
                [
                    {
                        "id": 1,
                        "name": "Task"
                    },
                    {
                        "id": 2,
                        "name": "Business Case"
                    },
                    {
                        "id": 3,
                        "name": "Requirements"
                    },
                    {
                        "id": 4,
                        "name": "Functional architecture"
                    },
                    {
                        "id": 5,
                        "name": "Technical architecture"
                    }
                ]
            }
        ]

### Get a template [GET /templates/{name}]

+ Parameters
    
    + name: Requirements
    
+ Response 200 (application/json)
        
        [
            {
                "id": "3",
                "name": "Requirements"
            }
        ]

### Get templates by category [GET/templates/byCategory/{categoryID}]

+ Parameters

    + categoryID: 2
    
+ Response 200 (application/json)

        [
            {
                "id":  3,
                "name": "Requirements"
            },
            {
                "id": 4,
                "name": "Technical architecture"
            }
        ]


## Recommendation collection [/recommendations]

### Get provided recommendations [GET]

+ Response 200 (application/json)

        [
            {
                "question": "Favourite programming language?",
                "published_at": "2015-08-05T08:40:51.620Z",
                "choices": [
                    {
                        "choice": "Swift",
                        "votes": 2048
                    }, {
                        "choice": "Python",
                        "votes": 1024
                    }, {
                        "choice": "Objective-C",
                        "votes": 512
                    }, {
                        "choice": "Ruby",
                        "votes": 256
                    }
                ]
            }
        ]

## Software expertise collection [/expertise]

### Returns a collection of software expertise. [GET]

If successful, this method returns a collection of strings representing the software expertises in the response body.

+ Request

    + Headers
    
            Authorization: Basic 12345
    
+ Response 200 (application/json)

        [
            "Tests",
            "Requirements",
            "Functional Architecture",
            "Technical Architecture",
            "Tasks",
            "Business Case",
            "Implementation",
            "Default",
            "Social Skills",
            "Communication",
            "Active Listening",
            "Feedback",
            "Peer-to-peer Sparring",
            "Motivation",
            "Leading without power",
            "Intrinsic motivation",
            "Leadership",
            "SMART",
            "Patterns",
            "Half-object",
            "Iterator Pattern",
            "Batch Method Pattern",
            "Enumeration Method Pattern",
            "Combined Method Pattern",
            "Batched Iterator Pattern",
            "Pattern language",
            "Software Architecture",
            "Design",
            "Strategic Design",
            "Tactical Design",
            "Forces",
            "Architecture View",
            "Architecture Process",
            "Reference Architecture",
            "Component",
            "Architecture Approach",
            "System Scoping",
            "Domain Scoping",
            "Baseline architecture",
            "Quality feedback loop",
            "Usability",
            "Architecture Vision",
            "Design Tactics",
            "Quality attribute",
            "Quality attribute scenario",
            "Architecture View",
            "Architecture Documentation",
            "Refactoring",
            "Reengineering",
            "Rewriting",
            "Architecture smell",
            "Architecture Review",
            "Simulation",
            "Code Quality Assessment",
            "Quantitative Review",
            "Qualitative Review",
            "Active Design Review",
            "Industry Practice Review",
            "SAAM",
            "ATAM",
            "Utility Tree",
            "ISO 9126-1",
            "Volere",
            "Quality attribute",
            "NFR",
            "Non-functional requirement",
            "Kano",
            "Fishbone",
            "Utility tree",
            "Quality Attribute Workshop",
            "Requirements Engineering",
            "SysML",
            "Baselines",
            "Traceability",
            "Requirements Specification Checklist",
            "Software Testing",
            "Test exit criteria",
            "Bugs",
            "Test progress",
            "Coverage",
            "Risk-based testing",
            "Test levels",
            "Integration test",
            "System test",
            "Design for testability",
            "Logging tracing",
            "Testing tactics",
            "Test design methods",
            "Test basis",
            "Test case",
            "Dimensions of testing",
            "Test design methods poster",
            "Traceability matrix",
            "Use-case-based testing",
            "State-based testing",
            "white-box testing",
            "Unit tests",
            "Test-driven development ",
            "TDD",
            "CQM",
            "Architecture Analysis",
            "Architecture Improvement",
            "System Development ",
            "Test",
            "Architecture Quality Characteristics",
            "Test Automation Management",
            "Software Engineering",
            "Architecture Definition and Management",
            "Systems Engineering",
            "Architecture Tracking",
            "Architecture Lifecycle Management",
            "Model Driven Development",
            "Model Quality Assurance",
            "Model-Based Architecture Development",
            "Traceable Architecture Violation Management",
            "Performance Engineering for Container-based Ecosystems",
            "Agile Data Techniques",
            "Product Line Engineering",
            "Software Architecture in Dedicated Systems",
            "Development Efficiency",
            "Business Architecture Alignment",
            "User Experience Design",
            "User Interface",
            "Software Ecosystems",
            "Agile",
            "Agility ",
            "SCRUM",
            "KANBAN",
            "Dependability",
            "Dependable systems",
            "Architecture Modeling",
            "Domain specific Language",
            "DSL",
            "Data",
            "Data modeling",
            "Data analytics",
            "Cloud",
            "Design thinking",
            "Design Smells",
            "Code Audit",
            "Design Audit",
            "Design Quality Assessment",
            "Security"
        ]